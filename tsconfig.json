{
  "compilerOptions": {
    // указываем директорию для сборки
    "outDir": "./dist/",
    // Подсвечивает все места где не указан тип данных
    // Однако это не означает, что теперь вовсе нельзя использовать any.
    // Это означает лишь, что в подобных ситуация разработчик должен явно писать any,
    "noImplicitAny": true,
    // указываем модульную систему сборки
    "module": "ESNext",
    // указывем версию стандарта ES, в которую будет скомпилирован код: для поддержки большинства браузеров
    "target": "es5",
    // для обработки jsx
    "jsx": "react-jsx",
    // Компилятор будет обрабатывать не только TS файлы, но и JS файлы
    "allowJs": true,
    // определяет то какие будут импорты и экспорты внутри TS файлов
    "moduleResolution": "node",
    // для абсолютного импорта (все импорты будут идти из папки src чтобы убрать длинные импорты - '../../../../sdasfdsfs' + нужно настроить webpack resolvers)
    "baseUrl": ".",
    "paths": {
      "*": [
        "./src/*"
      ]
    },
    // Если какая-либо библиотека не имеет default import, лоадеры вроде ts-loader или babel-loader автоматически создают их вместо такого импорта
    // import * as React from 'react';
    // можно писать такой
    // import React from 'react';
    "allowSyntheticDefaultImports": true,
    // esModuleInterop позволяет работать с пакетами, которые используют common js как с обычными пакета с помощью import (require() module.export) = common js 
    // import Moment from 'moment'; 
    // без флага esModuleInterop результат undefined 
    // console.log(Moment); 
    // c флагом результат [object Object] 
    // console.log(Moment);
    "esModuleInterop": true,
  },
  //  ts-node не поддерживает никакой синтаксис модулей, кроме commonjs. Так как мы используем "module": "ESNext", будет ошибка
  "ts-node": {
    "compilerOptions": {
      "module": "CommonJS"
    }
  },
}